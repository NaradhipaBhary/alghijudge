{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onChange","newValue","setState","code","submitCode","buttonDisabled","fetch","process","method","headers","body","JSON","stringify","problemName","state","then","resp","json","data","alert","showIO","forEach","push","toggleIO","index","Array","from","getIOResult","map","value","idx","key","className","isAccepted","style","color","type","onClick","input","expectedOutput","programOutput","stdout","id","data-toggle","aria-haspopup","aria-expanded","this","aria-labelledby","showPrintMargin","mode","theme","fontSize","width","name","editorProps","$blockScrolling","href","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SA0KeA,G,wBAhKb,aAAe,IAAD,8BACZ,+CAWFC,SAAW,SAACC,GACV,EAAKC,SAAS,CAAEC,KAAMF,KAbV,EAgBdG,WAAa,WACX,EAAKF,SAAS,CAAEG,gBAAgB,IAChCC,MAAMC,iDAA+C,CACnDC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBC,YAAa,EAAKC,MAAMD,YACxBV,KAAM,EAAKW,MAAMX,SAElBY,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UACpBF,MAAK,SAAAG,GACJ,GAAa,WAATA,EACF,EAAKhB,SAAS,CAAEG,gBAAgB,IAChCc,MAAM,qBACD,CACL,IAAIC,EAAS,GACbF,EAAKG,SAAQ,kBAAMD,EAAOE,MAAK,MAC/B,EAAKpB,SAAS,CAAEG,gBAAgB,EAAOa,KAAMA,EAAME,OAAQA,SAjCnD,EAsCdG,SAAW,SAACC,GACV,IAAIJ,EAASK,MAAMC,KAAK,EAAKZ,MAAMM,QACnCA,EAAOI,KAAU,EACjB,EAAKtB,SAAS,CAAEkB,OAAQA,KAzCZ,EA4CdO,YAAc,WACZ,IAAIH,EAAQ,EACZ,OAAO,EAAKV,MAAMI,KAAKU,KAAI,SAAAC,GACzB,IAAIC,IAAQN,EACZ,OACE,yBAAKO,IAAMD,EAAME,UAAU,aACzB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,eAAd,aAAwCF,KAG5C,yBAAKE,UAAU,OACb,yBAAKA,UAAU,OAEU,OAArBH,EAAMI,WACJ,uCAAY,0BAAMC,MAAO,CAAEC,MAAO,YAAtB,OAEZ,uCAAY,0BAAMD,MAAO,CAAEC,MAAO,YAAcN,EAAMI,aAGxD,EAAKnB,MAAMM,OAAOU,GAClB,4BAAQM,KAAK,SAASJ,UAAU,8BAA8BK,QAAS,kBAAM,EAAKd,SAASO,KAA3F,qBAIA,4BAAQM,KAAK,SAASJ,UAAU,8BAA8BK,QAAS,kBAAM,EAAKd,SAASO,KAA3F,uBAOJ,EAAKhB,MAAMM,OAAOU,GAChB,yBAAKE,UAAU,YACb,yBAAKA,UAAU,YAAf,SAEE,yBAAKA,UAAU,kBAAkBH,EAAMS,QAEzC,yBAAKN,UAAU,YAAf,mBAEE,yBAAKA,UAAU,kBAAkBH,EAAMU,iBAEzC,yBAAKP,UAAU,YAAf,kBAEE,yBAAKA,UAAU,kBAAkBH,EAAMW,cAAcC,UAIzD,oCAzFV,EAAK3B,MAAQ,CACXD,YAAa,gBACbV,KAAM,GACNE,gBAAgB,EAChBa,KAAM,GACNE,OAAQ,IARE,E,sEAmGJ,IAAD,OACP,OACE,yBAAKY,UAAU,iBAEb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,SAAd,cACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YACb,4BAAQA,UAAU,sBAAsBI,KAAK,SAASM,GAAG,qBAAqBC,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,SACrIC,KAAKhC,MAAMD,aAGd,yBAAKmB,UAAU,gBAAgBe,kBAAgB,sBAC7C,4BAAQf,UAAU,gBAAgBK,QAAS,kBAAM,EAAKnC,SAAS,CAAEW,YAAa,oBAA9E,iBACA,4BAAQmB,UAAU,gBAAgBK,QAAS,kBAAM,EAAKnC,SAAS,CAAEW,YAAa,oBAA9E,oBAIN,yBAAKmB,UAAU,eACb,kBAAC,IAAD,CACEgB,iBAAiB,EACjBC,KAAK,OACLC,MAAM,UACNlD,SAAU8C,KAAK9C,SACfmD,SAAU,GACVC,MAAM,OACNC,KAAK,cACLC,YAAa,CAACC,iBAAiB,GAC/B1B,MAAOiB,KAAKhC,MAAMX,QAGtB,yBAAK6B,UAAU,cACb,yBAAKA,UAAU,sBACb,uBAAGA,UAAU,UAAUwB,KAAK,oEAA5B,eAEF,yBAAKxB,UAAU,uBAEXc,KAAKhC,MAAMT,eACT,4BAAQ+B,KAAK,SAASJ,UAAU,0BAA0ByB,UAAQ,GAAlE,cAEA,4BAAQrB,KAAK,SAASJ,UAAU,0BAA0BK,QAASS,KAAK1C,YAAxE,YAIR,yBAAK4B,UAAU,SAEXc,KAAKhC,MAAMI,OAAS,GAClB,+BAEA4B,KAAKnB,sB,GAvJL+B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,MAAK,SAAAwD,GACjCA,EAAaC,kB","file":"static/js/main.a57b9230.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport AceEditor from 'react-ace';\r\n\r\nimport 'brace/mode/java';\r\nimport 'brace/theme/dracula';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      problemName: \"TP-2 SDA 2019\",\r\n      code: \"\",\r\n      buttonDisabled: false,\r\n      data: [],\r\n      showIO: []\r\n    }\r\n  }\r\n\r\n  onChange = (newValue) => {\r\n    this.setState({ code: newValue });\r\n  }\r\n\r\n  submitCode = () => {\r\n    this.setState({ buttonDisabled: true });\r\n    fetch(process.env.REACT_APP_API_URL + '/submitcode', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        problemName: this.state.problemName,\r\n        code: this.state.code\r\n      })\r\n    }).then(resp => resp.json())\r\n    .then(data => {\r\n      if (data === \"failed\") {\r\n        this.setState({ buttonDisabled: false });\r\n        alert(\"Submit Failed\");\r\n      } else {\r\n        let showIO = [];\r\n        data.forEach(() => showIO.push(false));\r\n        this.setState({ buttonDisabled: false, data: data, showIO: showIO });\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleIO = (index) => {\r\n    let showIO = Array.from(this.state.showIO);\r\n    showIO[index] ^= true;\r\n    this.setState({ showIO: showIO });\r\n  }\r\n\r\n  getIOResult = () => {\r\n    let index = 0;\r\n    return this.state.data.map(value => {\r\n      let idx = ++index;\r\n      return (\r\n        <div key={ idx } className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <h3 className=\"text-center\">Test Case { idx }</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              {\r\n                value.isAccepted === \"AC\" ?\r\n                  <h4>Status: <span style={{ color: \"#a3ffa3\" }}>AC</span></h4>\r\n                :\r\n                  <h4>Status: <span style={{ color: \"#fa7979\" }}>{value.isAccepted}</span></h4>\r\n              }\r\n              {\r\n                this.state.showIO[idx] ?\r\n                <button type=\"button\" className=\"btn btn-dark show-btn w-100\" onClick={() => this.toggleIO(idx)}>\r\n                  Hide Input/Output\r\n                </button>\r\n                :\r\n                <button type=\"button\" className=\"btn btn-dark show-btn w-100\" onClick={() => this.toggleIO(idx)}>\r\n                  Show Input/Output\r\n                </button>\r\n              }\r\n            </div>\r\n          </div>\r\n          {\r\n            this.state.showIO[idx] ?\r\n              <div className=\"row pt-2\">\r\n                <div className=\"col-lg-4\">\r\n                  Input:\r\n                  <div className=\"card card-body\">{value.input}</div>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                  Expected Output:\r\n                  <div className=\"card card-body\">{value.expectedOutput}</div>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                  Program Output:\r\n                  <div className=\"card card-body\">{value.programOutput.stdout}</div>\r\n                </div>\r\n              </div>\r\n            :\r\n              <span></span>\r\n          }\r\n        </div>\r\n      )\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App container\">\r\n        {/* <a href={ process.env.REACT_APP_API_URL + '/login' }>Login</a> */}\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <h2 className=\"title\">AlghiJudge</h2>\r\n            <div className=\"problem-name\">\r\n              <div className=\"dropdown\">\r\n                <button className=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                  {this.state.problemName}\r\n               \r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                  <button className=\"dropdown-item\" onClick={() => this.setState({ problemName: \"TP-1 SDA 2019\"})}>TP-1 SDA 2019</button>\r\n                  <button className=\"dropdown-item\" onClick={() => this.setState({ problemName: \"TP-2 SDA 2019\"})}>TP-2 SDA 2019</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-editor\">\r\n              <AceEditor\r\n                showPrintMargin={false}\r\n                mode=\"java\"\r\n                theme=\"dracula\"\r\n                onChange={this.onChange}\r\n                fontSize={16}\r\n                width=\"100%\"\r\n                name=\"text-editor\"\r\n                editorProps={{$blockScrolling: true}}\r\n                value={this.state.code}\r\n              />\r\n            </div>\r\n            <div className=\"row bottom\">\r\n              <div className=\"col-md-6 text-left\">\r\n                <a className=\"tc-link\" href=\"https://github.com/darklordace/alghijudge-api/tree/master/static\">Test Cases</a>\r\n              </div>\r\n              <div className=\"col-md-6 text-right\">\r\n                {\r\n                  this.state.buttonDisabled ?\r\n                    <button type=\"button\" className=\"btn btn-dark submit-btn\" disabled>Loading...</button>\r\n                  :\r\n                    <button type=\"button\" className=\"btn btn-dark submit-btn\" onClick={this.submitCode}>Submit</button>\r\n                }\r\n              </div>\r\n            </div>\r\n            <div className=\"hasil\">\r\n              {\r\n                this.state.data === [] ?\r\n                  <span></span>\r\n                :\r\n                  this.getIOResult()\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onChange","newValue","setState","code","submitCode","buttonDisabled","fetch","process","method","headers","body","JSON","stringify","problemName","state","then","resp","json","data","alert","showIO","forEach","push","toggleIO","index","Array","from","getIOResult","map","value","idx","key","className","isAccepted","style","color","type","onClick","input","expectedOutput","programOutput","stdout","id","data-toggle","aria-haspopup","aria-expanded","this","aria-labelledby","showPrintMargin","mode","theme","fontSize","width","name","editorProps","$blockScrolling","href","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4c6b8ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport AceEditor from 'react-ace';\n\nimport 'brace/mode/java';\nimport 'brace/theme/dracula';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      problemName: \"TP-2 SDA 2019\",\n      code: \"\",\n      buttonDisabled: false,\n      data: [],\n      showIO: []\n    }\n  }\n\n  onChange = (newValue) => {\n    this.setState({ code: newValue });\n  }\n\n  submitCode = () => {\n    this.setState({ buttonDisabled: true });\n    fetch(process.env.REACT_APP_API_URL + '/submitcode', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        problemName: this.state.problemName,\n        code: this.state.code\n      })\n    }).then(resp => resp.json())\n    .then(data => {\n      if (data === \"failed\") {\n        this.setState({ buttonDisabled: false });\n        alert(\"Submit Failed\");\n      } else {\n        let showIO = [];\n        data.forEach(() => showIO.push(false));\n        this.setState({ buttonDisabled: false, data: data, showIO: showIO });\n      }\n    });\n  }\n\n  toggleIO = (index) => {\n    let showIO = Array.from(this.state.showIO);\n    showIO[index] ^= true;\n    this.setState({ showIO: showIO });\n  }\n\n  getIOResult = () => {\n    let index = 0;\n    return this.state.data.map(value => {\n      let idx = ++index;\n      return (\n        <div key={ idx } className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <h3 className=\"text-center\">Test Case { idx }</h3>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              {\n                value.isAccepted === \"AC\" ?\n                  <h4>Status: <span style={{ color: \"#a3ffa3\" }}>AC</span></h4>\n                :\n                  <h4>Status: <span style={{ color: \"#fa7979\" }}>{value.isAccepted}</span></h4>\n              }\n              {\n                this.state.showIO[idx] ?\n                <button type=\"button\" className=\"btn btn-dark show-btn w-100\" onClick={() => this.toggleIO(idx)}>\n                  Hide Input/Output\n                </button>\n                :\n                <button type=\"button\" className=\"btn btn-dark show-btn w-100\" onClick={() => this.toggleIO(idx)}>\n                  Show Input/Output\n                </button>\n              }\n            </div>\n          </div>\n          {\n            this.state.showIO[idx] ?\n              <div className=\"row pt-2\">\n                <div className=\"col-lg-4\">\n                  Input:\n                  <div className=\"card card-body\">{value.input}</div>\n                </div>\n                <div className=\"col-lg-4\">\n                  Expected Output:\n                  <div className=\"card card-body\">{value.expectedOutput}</div>\n                </div>\n                <div className=\"col-lg-4\">\n                  Program Output:\n                  <div className=\"card card-body\">{value.programOutput.stdout}</div>\n                </div>\n              </div>\n            :\n              <span></span>\n          }\n        </div>\n      )\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        {/* <a href={ process.env.REACT_APP_API_URL + '/login' }>Login</a> */}\n        <div className=\"row\">\n          <div className=\"col\">\n            <h2 className=\"title\">AlghiJudge</h2>\n            <div className=\"problem-name\">\n              <div className=\"dropdown\">\n                <button className=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                  {this.state.problemName}\n               \n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                  <button className=\"dropdown-item\" onClick={() => this.setState({ problemName: \"TP-1 SDA 2019\"})}>TP-1 SDA 2019</button>\n                  <button className=\"dropdown-item\" onClick={() => this.setState({ problemName: \"TP-2 SDA 2019\"})}>TP-2 SDA 2019</button>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-editor\">\n              <AceEditor\n                showPrintMargin={false}\n                mode=\"java\"\n                theme=\"dracula\"\n                onChange={this.onChange}\n                fontSize={16}\n                width=\"100%\"\n                name=\"text-editor\"\n                editorProps={{$blockScrolling: true}}\n                value={this.state.code}\n              />\n            </div>\n            <div className=\"row bottom\">\n              <div className=\"col-md-6 text-left\">\n                <a className=\"tc-link\" href=\"https://github.com/darklordace/alghijudge-api/tree/master/static\">Test Cases</a>\n              </div>\n              <div className=\"col-md-6 text-right\">\n                {\n                  this.state.buttonDisabled ?\n                    <button type=\"button\" className=\"btn btn-dark submit-btn\" disabled>Loading...</button>\n                  :\n                    <button type=\"button\" className=\"btn btn-dark submit-btn\" onClick={this.submitCode}>Submit</button>\n                }\n              </div>\n            </div>\n            <div className=\"hasil\">\n              {\n                this.state.data === [] ?\n                  <span></span>\n                :\n                  this.getIOResult()\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}